#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#define MAX 100
int visited[MAX];
struct node{
    int data;
    struct node*link;
};
struct list{
    struct node*head;
};
struct Graph{
    int vertices;
    struct list*array;
};
struct node*createNode(int data){
    struct node*newnode=malloc(sizeof(struct node));
    newnode->data=data;
    newnode->link=NULL;
    return newnode;
}
struct Graph*createGraph(int vertices){
    int i;
    struct Graph*graph=malloc(sizeof(struct Graph));
    graph->vertices=vertices;
    graph->array=(struct list*)malloc(vertices*sizeof(struct list));
    
    for(i=0;i<vertices;i++){
        graph->array[i].head=NULL;
    }
    return graph;
}
struct Graph*addEdge(int src,int dest,int vertices){
    struct Graph*graph=createGraph(vertices);
    struct node*newnode=createNode(dest);
    newnode->link=graph->array[src].head;
    graph->array[src].head=newnode;
    return graph;
}
void DFS(int startnode,struct Graph*graph){
    visited[startnode]=1;
    printf("%d ",startnode);
    
    struct node*temp=graph->array[startnode].head;
    while(temp){
        int currentNode=temp->data;
        if(!visited[currentNode]){
            DFS(currentNode,graph);
        }
        temp=temp->link;
    }
}
void DFSorder(struct Graph*graph,int ordersize,int order[]){
    int i;
    bool*visited=(bool*)malloc(graph->vertices*sizeof(bool));
    for(i=0;i<graph->vertices;i++){
        visited[i]=false;
    }
    for(i=0;i<ordersize;i++){
        if(!visited[order[i]]){
            DFS(order[i],graph);
        }
    }
}
int main(){
    int vertices,i,edges;
    printf("Enter the number of vertices:");
    scanf("%d",&vertices);
    printf("Enter the number of edges:");
    scanf("%d",&edges);
    struct Graph*graph=createGraph(vertices);
    for(i=0;i<edges;i++){
        int src;
        printf("Enter the vertex1:");
        scanf("%d",&src);
        int dest;
        printf("Enter the vertex2:");
        scanf("%d",&dest);
        addEdge(src,dest,vertices);
    }
    int order[]={2,0,1,3};
    int ordersize=sizeof(order)/sizeof(order[0]);
    DFSorder(graph,ordersize,order);
}
